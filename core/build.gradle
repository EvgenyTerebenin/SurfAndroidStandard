apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def config = rootProject.extensions.getByName("ext")

android {

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileSdkVersion config["compileSdkVersion"]
    buildToolsVersion config["buildToolsVersion"]

    defaultConfig {
        minSdkVersion config["minSdkVersion"]
        targetSdkVersion config["targetSdkVersion"]
        versionCode config["versionCode"]
        versionName  config["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("../keystore/prod.keystore.jks")
            storePassword "qsdm345nbdfg458smm4"
            keyAlias "prod"
            keyPassword "qsdm345nbdfg458smm4"
        }
        test {
            storeFile file("../keystore/test.keystore")
            storePassword "qatest"
            keyAlias "test"
            keyPassword "qatest"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.test
            resValue "bool", "only_portrait", "false"
        }
        qa {
            signingConfig signingConfigs.test
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable = true
            ext.betaDistributionReleaseNotes = System.getenv("GoLamaGo_Android_Crashlytics_NOTES")
            ext.betaDistributionGroupAliases = "Surf"
            ext.betaDistributionNotifications = true
            resValue "bool", "only_portrait", "false"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "bool", "only_portrait", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // Library, Apt versions
    def daggerVersion = config["daggerVersion"]
    def lombokVersion = config["lombokVersion"]
    def appcompatVersion = config["appcompatVersion"]
    def rxBindingVersion = '1.0.1'

    api fileTree(dir: 'libs', include: ['*.jar'])

    //
    api "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    //annotations
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "javax.annotation:jsr250-api:1.0"

    //main
    api "com.agna.ferro:ferro-rx:1.0.2"
    api "com.android.support:design:${appcompatVersion}"
    api "com.android.support:appcompat-v7:${appcompatVersion}"
    api "com.android.support:recyclerview-v7:${appcompatVersion}"
    api "io.reactivex:rxjava:1.3.0"
    api "io.reactivex:rxandroid:1.2.1"
    api "javax.inject:javax.inject:1"
    api "com.github.bumptech.glide:glide:3.8.0"
    api "com.annimon:stream:1.1.7"
    api "com.jakewharton.rxbinding:rxbinding:${rxBindingVersion}"
    api "com.jakewharton.rxbinding:rxbinding-appcompat-v7:${rxBindingVersion}"
    api 'org.jetbrains:annotations:15.0'
    api 'com.android.support:multidex:1.0.2'

    //logging
    api "com.jakewharton.timber:timber:4.5.1"
    api "com.github.anrwatchdog:anrwatchdog:1.3.0"
//    api('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
//        transitive = true
//    }

    //other
    api 'uk.co.chrisjenx:calligraphy:2.2.0'

    //test
    testImplementation 'junit:junit:4.12'

    publishing {
        publications {
            aar(MavenPublication) {
                groupId = applicationId
                version = android.defaultConfig.versionName
                artifactId project.getName()
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }

}
