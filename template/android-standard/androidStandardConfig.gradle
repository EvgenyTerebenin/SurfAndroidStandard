apply from: '../config.gradle'

// Скрипт для чтения и экспорта properties для дальнейшей настройки сборки

// Директория для локальной загрузки android-standard
def androidStandardDebugDir = null
// Флаг для включения режима локальной загрузки
def androidStandardDebugMode = false

Properties properties = new Properties()

try {
    properties.load(file('androidStandard.properties').newDataInputStream())

    androidStandardDebugDir = properties.getProperty('androidStandardDebugDir')
    if (androidStandardDebugDir == null) {
        logger.error('androidStandardDebugDir not defined. ' +
                'Please define it in androidStandard.properties file to enable android-standard debug mode.')
    } else {
        def debugModeProperty = properties.getProperty('androidStandardDebugMode')
        if (debugModeProperty != null) {
            androidStandardDebugMode = debugModeProperty.toBoolean()
        }
        if (!androidStandardDebugMode) {
            logger.error('androidStandardDebugMode = false')
        }
    }
} catch (FileNotFoundException ignored) {
    logger.error('androidStandard.properties file not found')
}

gradle.ext {
    androidStandard = [
            debugDir       : androidStandardDebugDir,
            debugMode      : androidStandardDebugMode,
    ]

    // Флаг, проверяющий, активирован ли режим локальной загрузки модулей android-standard
    androidStandard.debugEnabled = gradle.ext.androidStandard.debugDir != null && gradle.ext.androidStandard.debugMode

    // Функция для подключения модулей android-standard
    androidStandard.api = { context, modules ->
        context.dependencies {
            modules.each {
                if (!gradle.ext.androidStandard.debugEnabled) {
                    // Подключение модулей из artifactory
                    api "ru.surfstudio.android:$it:$surfCoreVersionName"
                } else {
                    // Подключение модулей из локального репозитория для отладки
                    api context.project(":$it")
                }
            }
        }
    }
}