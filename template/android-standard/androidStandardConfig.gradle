apply from: '../config.gradle'

// Скрипт для чтения и экспорта properties для дальнейшей настройки сборки

// Директория для локальной загрузки android-standard
def androidStandardDebugDir = null
// Флаг для включения режима локальной загрузки
def androidStandardDebugMode = false

Properties properties = new Properties()

try {
    properties.load(file('androidStandard.properties').newDataInputStream())

    androidStandardDebugDir = properties.getProperty('androidStandardDebugDir')
    if (androidStandardDebugDir == null) {
        logger.error('androidStandardDebugDir not defined. ' +
                'Please define it in androidStandard.properties file to enable android-standard debug mode.')
    } else {
        def debugModeProperty = properties.getProperty('androidStandardDebugMode')
        if (debugModeProperty != null) {
            androidStandardDebugMode = debugModeProperty.toBoolean()
        }
        if (!androidStandardDebugMode) {
            logger.error('androidStandardDebugMode = false')
        }
    }
} catch (FileNotFoundException ignored) {
    logger.error('androidStandard.properties file not found')
}

gradle.ext {
    androidStandard = [
            debugDir : androidStandardDebugDir,
            debugMode: androidStandardDebugMode,
    ]

    // Флаг, проверяющий, активирован ли режим локальной загрузки модулей android-standard
    androidStandard.debugEnabled = gradle.ext.androidStandard.debugDir != null && gradle.ext.androidStandard.debugMode

    // Функция для подключения модулей android-standard
    androidStandard.api = { context, modules, closure = null ->
        if (!gradle.ext.androidStandard.debugEnabled) {
            // Подключение модулей из artifactory
            context.dependencies {
                modules.each {
                    if (closure == null) {
                        api "ru.surfstudio.android:$it:$surfCoreVersionName"
                    } else {
                        api("ru.surfstudio.android:$it:$surfCoreVersionName", closure)
                    }
                }
            }
        } else {
            // Подключение модулей из локального репозитория для отладки
            context.dependencies {
                modules.each {
                    if (closure == null) {
                        api context.project(":$it")
                    } else {
                        api(context.project(":$it"), closure)
                    }
                }
            }
            // Установка com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
            // с помощью рефлексии для избежания ошибок при конфликте версий GoogleServices
            def pluginClass = new GroovyClassLoader().loadClass("com.google.gms.googleservices.GoogleServicesPlugin")
            pluginClass.getField("config").get(null).disableVersionCheck = true
        }
    }
}