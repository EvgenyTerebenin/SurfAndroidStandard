import java.lang.annotation.Annotation

//task customTest(type: Test) {
////task customTest(type: Test, dependsOn: ['testDebugUnitTest', 'assemble']) {
//    setTestClassesDirs(files(project.android.sourceSets.test.java))
//
//    doFirst {
//        String buildVariant = "debug"
//
//        File javaBuildClassesDir = new File("$buildDir/intermediates/javac/${buildVariant}UnitTest/compile${capitalize(buildVariant)}UnitTestJavaWithJavac/classes")
//        File kotlinBuildClassesDir = new File("$buildDir/tmp/kotlin-classes/${buildVariant}UnitTest")
//
//        println "123 ${javaBuildClassesDir.exists()}"
//        println "123 ${kotlinBuildClassesDir.exists()}"
//    }
//}

tasks.whenTaskAdded { task ->
    if (task.name.matches("^test\\w*UnitTest\$")) {
        String testTypePropertyName = "testType"
        if (project.hasProperty(testTypePropertyName)) {
            String testType = project.property(testTypePropertyName)
            task.doFirst {
                println "123 ${buildscript.configurations.classpath.class}"
                String buildVariant = name.substring(4, name.indexOf("UnitTest")).toLowerCase()
                List classNames = Utils.defineClassNames(getTestClassesDirs().asList())
                List<String> projectBuildPaths = []
                project.rootProject.allprojects.forEach {
                    projectBuildPaths += it.buildDir.absolutePath
                }
                ClassLoader loader = Utils.getClassLoader(
                        getTestClassesDirs().toList(),
                        projectBuildPaths,
                        buildVariant
                )

//                ClassLoader loader = this.class.getClassLoader()

                List filtered = Utils.annotationFilter(classNames, testType, loader)
//                println 'Running ' + filtered.size() + ' tests:\n' + filtered*.toString()*.replaceAll('^', '\t').join('\n')

                filter {
                    setIncludePatterns(filtered as String[])
                }
            }
        }
    }
}

class Utils {
    static List<String> defineClassNames(List classesDirs) {
        List classNames = []

        classesDirs.toList().forEach { classesDir ->
            String prefix = classesDir.toString() + '/'

            classesDir.traverse {
                if (it.absolutePath.endsWith('.class') && !it.name.contains("\$") && !it.name.contains("Component")) {
                    String name = (it.absolutePath - prefix).replaceAll('/', '.') - '.class'
                    classNames << name
                }
            }
        }

        return classNames
    }

    static ClassLoader getClassLoader(List classPath, List<String> projectBuildPaths, String buildVariant) {
        List urls = classPath.collect {
            it.toURI().toURL()
        }
        List projectsUrls = []
        projectBuildPaths.forEach { projectBuildPath ->
            projectsUrls.add(new File("$projectBuildPath/intermediates/javac/$buildVariant/compile${capitalize(buildVariant)}JavaWithJavac/classes").toURI().toURL())
            projectsUrls.add(new File("$projectBuildPath/tmp/kotlin-classes/$buildVariant").toURI().toURL())
        }
        return URLClassLoader.newInstance(
                urls as URL[],
                URLClassLoader.newInstance(
                        projectsUrls as URL[]
//                        ,
//                        Thread.currentThread().getContextClassLoader()
                )
        )
    }

    static List annotationFilter(List<String> classNames, String testType, ClassLoader loader) {
//    map.prefix = map?.prefix ?: '' // prefix: provide convenience for passing in annotation names

        List result

        if (testType == "unit") {
            classNames.forEach { name ->
                Class clazz = loader.loadClass(name)
                println "123 ${clazz.canonicalName}"
                println "123 ${clazz.class.annotations}"
                println "123 ${clazz.class.declaredAnnotations}"

                clazz.declaredMethods.toList().forEach { annotation ->
                    println "123 $annotation ${annotation.annotations}"
                }
            }
        }

        if (testType == "api") {

        }

        if (testType == "waitApi") {

        }

        // filter with annotations
//        if (!map.includes) {
//            result = map?.names
//        } else {
//            result = []
//            map?.names.each { name ->
//                Class klass = loader.loadClass(name)
//                map?.includes.each { annotationName ->
//                    String fullName = map.prefix + annotationName
//                    Class<? extends Annotation> annotation = loader.loadClass(fullName).asSubclass(Annotation)
//                    if (klass.isAnnotationPresent(annotation)) {
//                        result << name
//                    }
//                }
//            }
//        }

        if (result?.size() == 0) result = ['no.tests.to.run']
        return result
    }

    static String capitalize(String str) {
        return str.substring(0, 1).toUpperCase() + str.substring(1)
    }
}